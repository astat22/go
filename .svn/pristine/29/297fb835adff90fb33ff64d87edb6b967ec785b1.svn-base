package Game;

import java.util.ArrayList;
import java.util.List;

public class Chain extends Plane
{

	public int breaths;
	Colour colour;
	public boolean isAlive = true;
	public Chain(Square stone)
	{
		this.stones = new ArrayList<Square>();
		stones.add(stone);
		this.colour = stone.getColour();
		computeNeighbours();
		//System.out.println("Liczba s졉iad雕 쓰刃ucha: "+ neighbours.size());
		computeBreaths();
	}
	public Chain(List<Square> chainedStones)
	{
		this.stones = chainedStones;
		this.colour = chainedStones.get(1).getColour();
		computeNeighbours();
		computeBreaths();
	}
	public Chain(Colour colour)
	{
		this.colour=colour;
	}
	/**
	 * Metoda obliczaj젺a i ustawiaj젺a warto띾 {@link breaths}. Aby dzia쓰쓰 poprawnie, konieczne jest wcze랉iejsze wywo쓰nie metody {@link computeNeighbours()}
	 */
	public void computeBreaths()
	{
		this.breaths = computeNumberOfBreaths();
		//System.out.println("Oddechy 쓰刃ucha: "+ this.breaths);
	}
	public int getBreaths() {
		return breaths;
	}
	public Colour getColour() {
		return colour;
	}
	/**
	 * Metoda zliczaj젺a oddechy 쓰刃ucha. Aby dzia쓰쓰 poprawnie, konieczne jest poprawne obliczenie {@link neighbours}
	 * @return liczba oddech雕 쓰刃ucha
	 */
	public int computeNumberOfBreaths()
	{
		int chainBreaths=0;
		for(Square stone: neighbours)
		{
			if(stone.getColour()==Colour.NONE)
			{
				chainBreaths++;
			}
		}
		return chainBreaths;
	}

	public void addStone(Square newStone)
	{
		this.stones.add(newStone);
		computeNeighbours();
		computeBreaths();
	}
}
