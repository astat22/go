/*TODO
 * nazwa u¿ytkownika
 * obiekt Player i komunikacja z nim
 * implementacja MouseListener
 */
package Client;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowListener;
import java.awt.geom.Line2D;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import GameTest.TestTools;

import javax.swing.*;

import Game.Colour;
import Message.Message;
import Server.Order;

//import Player.Player;

public class Client extends Thread
{
	public static final long serialVersionUID = 42L;
	private Window frame;
    private JLabel messageLabel;
	
	private int PORT = 8990;
    private Socket socket;
    private String login;
	private ObjectInputStream clInput;
	private ObjectOutputStream clOutput;
	private int boardSize = 19;
	private Colour myColour;
	private boolean movingFase = true, settingDeadSquaresFase=false;

	private TestTools tools;
	
    public Client(String serverAddress, String login) 
    {
    	this.login = login;
    	try
    	{
        	socket = new Socket(serverAddress, PORT);
			clOutput = new ObjectOutputStream(socket.getOutputStream());
			clInput = new ObjectInputStream(socket.getInputStream());
    	}
    	catch(IOException e){}
//trzeba poczekac na przeciwnika    
    	startGame();
    	frame = new Window(boardSize,login);
        run();
    }
    
    public void run()
    {
    	tools = new TestTools();
    	//czarny gracz rozpoczyna od ruchu
    	if(myColour==Colour.BLACK)
    	{
    		System.out.println(login+" Jestem graczem czarnym, rozpoczynam grê");
			frame.setActive();// odblokuj u¿ytkownikowi mo¿liwoœc wykonania akcji
			waitForOrder();//czekaj na akcjê u¿ytkownika
    	}
    	else
    	{
    		System.out.println(login+" Jestem graczem bia³ym, czekam");
    		frame.setOrder(Order.DENY);//ka¿ bia³emu czekac
    	}
    	Message incommingMessage;
    	while(movingFase)
    	{
    		try
    		{
    			incommingMessage = (Message)clInput.readObject();//czekaj na wiadomoœc
    			if(incommingMessage.getOrder()==Order.PLAY) tools.drawBoard(incommingMessage.getTable(), boardSize);
    			try {sleep(40);}catch(InterruptedException e){}//rozkaz odbiera dobrze, ale dlaczego table Ÿle?
    			followOrders(incommingMessage);//obs³u¿ wiadomoœc
    		}
    		catch(IOException e){}
    		catch(ClassNotFoundException e){}
    	}
    }
    public static void main(String[] args) throws Exception 
    {
        String serverAddress="localhost";
        String login = "Jacek";
        JOptionPane.showInputDialog("Podaj adres serwera",serverAddress);//(args.length == 0) ? "localhost" : args[1];
        login = JOptionPane.showInputDialog("Podaj login",login);
        String[] opponent = {"Bot","Losowy przeciwnik"};
        JFrame question = new JFrame("Wybór przeciwnika");
        String opponentName = (String) JOptionPane.showInputDialog(question, 
                "Wybierz przeciwnika",
                "Opponent",
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                opponent, 
                opponent[1]);
        Client client;
        if(!opponentName.equals("Bot"))
        	 client = new Client(serverAddress,login);
        else//graj z botem TODO
        	;
    }
    
    /**
     * Metoda oczekuj¹ca na sygna³ do rozpoczêcia gry
     */
    public void startGame()
    {
    	//System.out.println("Oczekiwanie na przeciwnika");
    	try
    	{
    		Message startMessage = (Message) clInput.readObject();
    		myColour = startMessage.col;
    		System.out.println("min: START");
    		/*if(startMessage.getOrder()==Order.SIZE)//serwer pyta o rozmiar
    		{
    			String[] size = {"19x19","13x13","9x9"};
    			JFrame question = new JFrame("Wybór przeciwnika");
    	        String sizeName = (String) JOptionPane.showInputDialog(question, 
    	                "Wybierz rozmiar planszy",
    	                "Size",
    	                JOptionPane.QUESTION_MESSAGE, 
    	                null, 
    	                size, 
    	                size[0]);
    	        //wyœlij odpowiedŸ
    			startGame();//czekaj na drugiego gracza
    		}*/
    	}
    	catch(IOException e){ System.out.println("IO Error");}
    	catch(ClassNotFoundException e){}
    }
    public void followOrders(Message m)
    {
    	switch(m.getOrder())
    	{
    		case TABLE:
    			System.out.println("min: TABLE");
    			//if(frame.table==null)
    			frame.setTable(m.int2Col());
    			//else
    			//	frame.table[m.x][m.y]=m.col;
    			frame.refresh();
    			break;
    		case PLAY:
    			System.out.println("min: PLAY");
    			//if(frame.table==null)
    			frame.setTable(m.int2Col());
    			//else
    				//frame.table[m.x][m.y]=m.col;
    			frame.refresh();
    			System.out.print(login+" - mój ruch:");
    			frame.setActive();// odblokuj u¿ytkownikowi mo¿liwoœc wykonania akcji
    			waitForOrder();//czekaj na akcjê u¿ytkownika
    		default:
    			break;
    	}
    }
    public void waitForOrder()
    {
    	Message letter;
    	while(frame.isActive()) //czekaj a¿ u¿ytkownik wykona akcjê
    		try{
    			sleep(300); 
    			//System.out.print(".");
    			}catch(InterruptedException e){}
    	//System.out.println("Wykona³eœ akcjê");
    	switch(frame.getOrder())
    	{
    		case PLAY:
    			letter = new Message(frame.getOrder(),frame.getCoord()[0],frame.getCoord()[1]);
    			try
    			{
    				clOutput.writeObject(letter);
    			}
    			catch(IOException e){}
    			break;
    		default:
    			break;
    	}
    	
    }
}