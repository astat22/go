package Server;

import java.util.ArrayList;
import java.util.List;
import java.io.*;
import java.net.*;

import Game.Colour;
import Message.Message;
import Player.Player;

public class Server extends Thread
{
	public static List<PlayedGame> currentGames;
	public static List<User> users;
	private static int port = 8990;
	public void run()
	{
		try
		{
			System.out.println("Go game server is running");
			ServerSocket listener = new ServerSocket(port);
			Socket wSock,blSock;
			try
			{
				while (true)
				{
					/*Tworze nowa gre, do której bêdê przypisywac graczy*/
					PlayedGame newGame = new PlayedGame();
					/* Metoda accept() czeka na nadejœcie po³¹czenia, 
					 * jeœli ¿¹danie takie po³¹czenia nadejdzie, 
					 * to zwraca nowe gniazdo s³u¿¹ce do obs³ugi tego po³¹czenia.*/
					wSock = listener.accept();//gniazdo bia³ego gracza
					System.out.println("Nowy bia³y gracz");
					ObjectOutputStream oos = new ObjectOutputStream(wSock.getOutputStream());
					ObjectInputStream ois = new ObjectInputStream(wSock.getInputStream());
					//oos.writeObject(new Message(Order.SIZE,0,0));//zapytaj o rozmiar
					//Message sm = (Message)ois.readObject();//odpowiedŸ z rozmiarem
					
					newGame.playerWhite = new Player(wSock,Colour.WHITE,ois,oos,19);//sm.getX());
					/*oczekiwanie na gracza czarnego*/
					blSock = listener.accept();
					System.out.println("Nowy czarny gracz");
					oos = new ObjectOutputStream(blSock.getOutputStream());
					ois = new ObjectInputStream(blSock.getInputStream());
					System.out.println("Otworzono strumienie dla gracza czarnego");
					newGame.playerBlack = new Player(blSock,Colour.BLACK,ois,oos,null);//fasada jest jedna dla obu graczy

					newGame.run();
					currentGames.add(newGame);
				}
			}
			finally
			{
				listener.close();
			}
		}
		catch(IOException e){}	
	}
	public static void main(String[] args) throws Exception
	{
		currentGames = new ArrayList<PlayedGame>();
		/*Tworze na podanym porcie gniazdo serwera,
		 *które posiada dodatkowe funkcjonalnoœci umo¿liwiaj¹ce równoczesn¹ obs³ugê wielu po³¹czeñ.
		 */
		Server s = new Server();
		s.run();
	}
}